**SLIDE 25**
Hey, what's up everybody? This is Tammy. Welcome back to our course, How To Make A Game Like Flappy Bird In Swift.

In this part of the course, you'll learn how to add obstacles to the scene. 


**SLIDE 26**
By the end of this video, your game will look like this.
(PLAY VIDEO)

The obstacles — in this case, the cacti — come in from right to left. This periodic spawning is done using a simple, repeating SKAction.


**SLIDE 27**
If you look at the screen shot behind me, you'll notice the cactus has an opening that's just large enough for Felipe to fly through. You'll also notice that the location of the opening varies with each obstacle.

This random variation can be accomplished using GameplayKit’s randomization classes.


**SLIDE 28**
The randomization classes that we're using include GKARC4RandomSource and GKRandomDistribution.

In Flappy Felipe we use these to spawn obstacles at random intervals, and to specify exactly how “random” things will be.

In this case, GKARC4RandomSource uses the ARC4 algorithm, which works for most games. And GKRandomDistribution produces a uniform distribution across a specific range, which is pretty consistent with a dice roll: each number has about the same probability of coming up as any other number.


**SLIDE 29**
Also, just like before, we're going to use the entity-component architecture.

In this case, obstacles will be entities and will share the same SpriteComponent the player entity uses. This allows us to reuse code and keep it and organized.

OK, time to see what this looks like in Xcode.


----- DEMO GOES HERE -----


**SLIDE 30**
Well, that’s it for this video, where you were learned how to add obstacles. In the next video, you'll learn about physics bodies and collision detection.

Thanks for watching, and we'll see you next time!

